
labb1_d0003e.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000afb  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008fd  00000000  00000000  00000d23  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000515  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00001b38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048b  00000000  00000000  00001c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000067b  00000000  00000000  00002113  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  0000278e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  58:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e4 e0       	ldi	r30, 0x04	; 4
  70:	f1 e0       	ldi	r31, 0x01	; 1
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a0 30       	cpi	r26, 0x00	; 0
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>
  7e:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  82:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <LCD_Init>:
		if (is_prime(n)){
			writeLong(n);
		}
		
	}
}
  8a:	e1 e6       	ldi	r30, 0x61	; 97
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 e8       	ldi	r24, 0x80	; 128
  90:	80 83       	st	Z, r24
  92:	10 82       	st	Z, r1
  94:	87 eb       	ldi	r24, 0xB7	; 183
  96:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
  9a:	87 e0       	ldi	r24, 0x07	; 7
  9c:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
  a0:	8f e0       	ldi	r24, 0x0F	; 15
  a2:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
  a6:	80 ec       	ldi	r24, 0xC0	; 192
  a8:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
  ac:	08 95       	ret

000000ae <blink>:

void blink(void){
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
	TCCR1B = (1<<CS12);
  b2:	84 e0       	ldi	r24, 0x04	; 4
  b4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
	CLKPR = (CLKPR) | (1 << CLKPS0); 
  b8:	e1 e6       	ldi	r30, 0x61	; 97
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	81 60       	ori	r24, 0x01	; 1
  c0:	80 83       	st	Z, r24
  c2:	80 e1       	ldi	r24, 0x10	; 16
  c4:	97 e2       	ldi	r25, 0x27	; 39
	for(int i = 0; i<10000; i++){
		if(TCNT1>=0x88B8){
  c6:	a4 e8       	ldi	r26, 0x84	; 132
  c8:	b0 e0       	ldi	r27, 0x00	; 0
			LCDDR3 = 1;
		} else{
			LCDDR3 = 0;
  ca:	ef ee       	ldi	r30, 0xEF	; 239
  cc:	f0 e0       	ldi	r31, 0x00	; 0
			LCDDR1 = 1;
  ce:	cd ee       	ldi	r28, 0xED	; 237
  d0:	d0 e0       	ldi	r29, 0x00	; 0
  d2:	41 e0       	ldi	r20, 0x01	; 1

void blink(void){
	TCCR1B = (1<<CS12);
	CLKPR = (CLKPR) | (1 << CLKPS0); 
	for(int i = 0; i<10000; i++){
		if(TCNT1>=0x88B8){
  d4:	2d 91       	ld	r18, X+
  d6:	3c 91       	ld	r19, X
  d8:	11 97       	sbiw	r26, 0x01	; 1
  da:	28 3b       	cpi	r18, 0xB8	; 184
  dc:	38 48       	sbci	r19, 0x88	; 136
  de:	10 f0       	brcs	.+4      	; 0xe4 <blink+0x36>
			LCDDR3 = 1;
  e0:	40 83       	st	Z, r20
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <blink+0x3a>
		} else{
			LCDDR3 = 0;
  e4:	10 82       	st	Z, r1
			LCDDR1 = 1;
  e6:	48 83       	st	Y, r20
  e8:	01 97       	sbiw	r24, 0x01	; 1
}

void blink(void){
	TCCR1B = (1<<CS12);
	CLKPR = (CLKPR) | (1 << CLKPS0); 
	for(int i = 0; i<10000; i++){
  ea:	a1 f7       	brne	.-24     	; 0xd4 <blink+0x26>
			LCDDR1 = 1;
		}
	}
	
	
}
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <main>:

int main(void)
{	
	LCD_Init();
  f2:	0e 94 45 00 	call	0x8a	; 0x8a <LCD_Init>
	writeChar('5',4);
	writeChar('6',5);
	writeChar('7',6);*/
	//primes();
	//writeLong(2345798);
	blink();
  f6:	0e 94 57 00 	call	0xae	; 0xae <blink>
	
	
	
	

}
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	08 95       	ret

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
