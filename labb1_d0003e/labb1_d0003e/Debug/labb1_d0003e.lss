
labb1_d0003e.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000110  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000110  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800102  00800102  000001a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b96  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000948  00000000  00000000  00000e26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000562  00000000  00000000  0000176e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  00001cd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ce  00000000  00000000  00001e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000605  00000000  00000000  00002312  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00002917  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e0 e1       	ldi	r30, 0x10	; 16
  70:	f1 e0       	ldi	r31, 0x01	; 1
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a2 30       	cpi	r26, 0x02	; 2
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	21 e0       	ldi	r18, 0x01	; 1
  80:	a2 e0       	ldi	r26, 0x02	; 2
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a8 30       	cpi	r26, 0x08	; 8
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 82 00 	call	0x104	; 0x104 <main>
  92:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <LCD_Init>:
	//8 MHz system clock with a prescaling factor of 256
	TCCR1B = (1<<CS12); 
	CLKPR  = CLKPR  | (1 << CLKPS0);

	while(true){
		while (Cycle())
  9a:	e1 e6       	ldi	r30, 0x61	; 97
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 e8       	ldi	r24, 0x80	; 128
  a0:	80 83       	st	Z, r24
  a2:	10 82       	st	Z, r1
  a4:	87 eb       	ldi	r24, 0xB7	; 183
  a6:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
  aa:	87 e0       	ldi	r24, 0x07	; 7
  ac:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
  b0:	8f e0       	ldi	r24, 0x0F	; 15
  b2:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
  b6:	80 ec       	ldi	r24, 0xC0	; 192
  b8:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
  bc:	08 95       	ret

000000be <pressed>:
	
	
}

bool pressed(void){
	curButtonVal = (PINB>>7);
  be:	23 b1       	in	r18, 0x03	; 3
  c0:	22 1f       	adc	r18, r18
  c2:	22 27       	eor	r18, r18
  c4:	22 1f       	adc	r18, r18
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <__data_end+0x1>
  cc:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__data_end>
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d6:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  da:	42 17       	cp	r20, r18
  dc:	53 07       	cpc	r21, r19
  de:	09 f4       	brne	.+2      	; 0xe2 <pressed+0x24>
  e0:	80 e0       	ldi	r24, 0x00	; 0
		return true;
	}
	return false;

	lastButtonVal = curButtonVal;
}
  e2:	08 95       	ret

000000e4 <button>:

void button(void){
	PORTB = PORTB | (1<<7);
  e4:	2f 9a       	sbi	0x05, 7	; 5

	DDRB = DDRB | (1 << 7);
  e6:	27 9a       	sbi	0x04, 7	; 4
    
	
	while (true)
	{
		if(pressed()){
			LCDDR3 = !LCDDR3;
  e8:	cf ee       	ldi	r28, 0xEF	; 239
  ea:	d0 e0       	ldi	r29, 0x00	; 0
  ec:	11 e0       	ldi	r17, 0x01	; 1
  ee:	00 e0       	ldi	r16, 0x00	; 0
	DDRB = DDRB | (1 << 7);
    
	
	while (true)
	{
		if(pressed()){
  f0:	0e 94 5f 00 	call	0xbe	; 0xbe <pressed>
  f4:	88 23       	and	r24, r24
  f6:	e1 f3       	breq	.-8      	; 0xf0 <button+0xc>
			LCDDR3 = !LCDDR3;
  f8:	98 81       	ld	r25, Y
  fa:	81 2f       	mov	r24, r17
  fc:	91 11       	cpse	r25, r1
  fe:	80 2f       	mov	r24, r16
 100:	88 83       	st	Y, r24
 102:	f6 cf       	rjmp	.-20     	; 0xf0 <button+0xc>

00000104 <main>:



int main(void)
{	
	LCD_Init();
 104:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Init>
	writeChar('6',5);
	writeChar('7',6);*/
	//primes();
	//writeLong(2345798);
	//blink();
	button();
 108:	0e 94 72 00 	call	0xe4	; 0xe4 <button>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
